<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Top 10 biggest cuts</title>
    <link rel= "stylesheet" href="style/style.css">
    <script src="https://d3js.org/d3.v4.min.js" charset="utf-8"></script>
</head>
<body>
  <div id="explanation">
    <p> Do you want more information about a specific Local Authority? Select one in the menu and click on the submit button to check out what will happen</p>
  </div>
  <div id="menu">
    <form name="Local Authority">
      <select name="Local Authority" id="la">
      </select>
      <input type="button" onclick="update()" value="Submit" id="submit_button">
    </form>
  </div>
  <div id="graph_costs">
  </div>
  <script>
    //Global variables and functions
    let file = "vis_data/Eng_LA_type_spending_austerity.csv"
    let localAuthority = d3.select("#la")

    //Adjust the name for the first graph
    function adjustName(nameArray, word1, word2) {
      let temp2 = []
      let result = []
      for (i=0;i<nameArray.length;i++){
        let temp = nameArray[i].split("_")
        for (i2=0;i2<temp.length;i2++) {
          if (temp[i2] != word1 && temp[i2] != word2) {
            temp2.push(temp[i2])
        }}
        result.push(temp2.join(" "))
        temp2 = []

      }
      return result
    };
    //Find the maximun value in the array
    function findMax(array) {
      let max = 0
      for (i=0;i<array.length;i++){
        if (Number(array[i]) > max){max = Number(array[i])}
      }
      return max
    }

    //Find the maximun value in the array
    function findMin(array) {
      let min = 0
      for (i=0;i<array.length;i++){
        if (Number(array[i]) < min){min = Number(array[i])}
      }
      return min
    }

    //Select the data of the chosen LA
    function selectLaData (data, la){
      for (i=0;i<data.length;i++) {
        if (data[i]["Code"] == la) {
          return [data[i]]
        }
      }
  };

    //Create the first graph
    //For this, we use the update function, which is called when the submit button is clicked
    function update() {

      var selectedLA = localAuthority._groups[0][0].value
      //Select the data for the Local authority and define it as a global variable
      window.laData = selectLaData(data[0], selectedLA)

      //Creates the first graph
      //First, it takes the necessary data for the first graph
      let dataFirstComponents = ["Dif_pp_real","Teaching_Staff_Real_Dif", "Supply_Teacher_Real_Dif", "Education_Support_Staff_Real_Dif", "Premises_Real_Dif", "Back_Office_Real_Dif", "Catering_Real_Dif", "Learning_Resources_Real_Dif", "Bought_in_professional_Services_Real_Dif"]
      let costData = []
      for (i=0;i< dataFirstComponents.length;i++) {
        let obj = {}
        obj[dataFirstComponents[i]] = laData[0][dataFirstComponents[i]]
        costData.push(obj)
      }
      //Clean the areas for the first graphs
      d3.select("#svg1")
        .remove();

      d3.select("#show")
        .remove();

      //Define the are of SVG1 and its margin
      var widthFirst = 700
      var heightFirst = 400

      var marginFirst = {
            top: 70,
            left: 160,
            right: 70,
            bottom: 10
          };

      //Adjust the data to have the correct names and prepare it to be correctly formatted
      let bandsFirstRaw = []
      let valuesFirst = []
      for (i=0;i < costData.length; i++) {
        bandsFirstRaw.push(Object.keys(costData[i])[0])
        valuesFirst.push(Object.values(costData[i])[0])
      }


      let bandsFirst = adjustName(bandsFirstRaw, "Dif", "Real")
      for (i=0;i < bandsFirst.length; i++) {
        if (bandsFirst[i] == "pp real") {bandsFirst[i] = "Total change"}
      }

      let maxValueFirst = findMax(valuesFirst)
      let minValueFirst = findMin(valuesFirst)

      //Put the data in the appropriate form for the first graph
      let firstGraphData =[]
      for (i=0;i<bandsFirst.length;i++){
        let object = {}
        object[bandsFirst[i]] = valuesFirst[i]
        firstGraphData.push(object)
      }

      //Create the SVG area
      var svgFirst = d3.select("#graph_costs")
          .append("svg")
          .attr('display', 'block')
          .attr('width', widthFirst)
          .attr('height', heightFirst)
          .attr('id', 'svg1')
          .append("g")
          .attr("transform", "translate(" + marginFirst.left + "," + marginFirst.top + ")")

      //Adjust the areas to be used in the scale
      widthFirst = widthFirst - marginFirst.left - marginFirst.right
      heightFirst = heightFirst - marginFirst.top - marginFirst.bottom

      //creates the scale

      var myScaleFirstX = d3.scaleLinear()
                        .range([0,widthFirst])
                        .domain([minValueFirst-1,maxValueFirst]);

      var myScaleFirstY = d3.scaleBand()
                        .range([0,heightFirst])
                        .paddingInner(0.1)
                        .domain(bandsFirst)

      //Create and append the axis
      var xAxisFirst = d3.axisTop(myScaleFirstX)
                         .tickFormat(function(d){
                           if (d>=0){return "£" + d}
                           else {return "-£" + d*-1}
                         });
      var yAxisFirst = d3.axisLeft(myScaleFirstY);

      svgFirst.append("g")
        .attr("class", "x axis")
        .call(xAxisFirst);

      svgFirst.append("g")
        .attr("class", "y axis")
        .call(yAxisFirst);

      //Create the labels, first with 0 opacity that changes when the bar is hovered
      var labelsFirst = svgFirst.selectAll(".labels1")
                      .data(firstGraphData);

      var newLabelsFirst = labelsFirst.enter()
                                  .append('text')
                                  .attr('class',function(d,i){ return "label" + i + "First"})
                                  .attr("y", function(d, i){ return myScaleFirstY(bandsFirst[i]) + myScaleFirstY.bandwidth()/2 + 3})
                                  .attr("x", function(d,i){
                                     if (d[bandsFirst[i]] > 0) {return myScaleFirstX(d[bandsFirst[i]]) + 3}
                                     else {return myScaleFirstX(3)}
                                   })
                                   .attr("opacity", 0)


      newLabelsFirst.merge(labelsFirst)
                    .text(function(d,i){
                      if (Object.values(d)>0){return "£" + Object.values(d)}
                      else{ return "-£" + Number(Object.values(d)) * -1}

                    })
                    .attr("font-size", "14")

      //Create the bars
      var barsFirst = svgFirst.selectAll(".bar1")
                      .data(firstGraphData);

      var newBarsFirst = barsFirst.enter()
                          .append('rect')
                          .attr('class',function(d,i){ return "bar" + i + "First"})
                          .attr("width", 0)
                          .attr("height", myScaleFirstY.bandwidth())
                          .attr("fill", function(d,i){
                             if (d[bandsFirst[i]] > 0) {return "#009b9e"}
                             else {return "#812b6a"}
                           })
                          .attr("y", function(d, i){ return myScaleFirstY(bandsFirst[i])})
                          .attr("x", myScaleFirstX(0))
                          .on("mouseover", function (d,i) {
                            d3.select(".bar" + i + "First")
                              .attr("stroke", "black")
                              .attr("stroke-width", "2px")
                              .attr("opacity", 0.8)

                            d3.select(".label" + i + "First")
                              .attr("opacity", 1)
                          })
                          .on("mouseout", function (d,i) {
                            d3.select(".bar" + i + "First")
                              .attr("stroke", "none")
                              .attr("opacity", 1)

                            d3.select(".label" + i + "First")
                              .attr("opacity", 0)
                          });

      newBarsFirst.merge(barsFirst)
                .transition()
                .duration(1000)
                .attr("x", function(d,i){
                  if (Number(valuesFirst[i]) < 0) {
                    return myScaleFirstX(Number(valuesFirst[i]))
                  } else { return myScaleFirstX(0)}
                })
                .attr("width", function(d,i){
                    if (d[bandsFirst[i]] > 0) {
                      return (myScaleFirstX(0) - myScaleFirstX(d[bandsFirst[i]])) *-1
                    }
                    else {
                      return (myScaleFirstX(d[bandsFirst[i]]) - myScaleFirstX(0)) *-1
                    }
                  });


      //Creates the title. The code was inspired by this one: http://www.d3noob.org/2013/01/adding-title-to-your-d3js-graph.html
      svgFirst.append("text")
              .data(laData)
              .text(function(d){
                return "Changes in spending per category in " + d["LA"]})
              .attr("x", (widthFirst / 2))
              .attr("y", 0 - (marginFirst.top / 2))
              .attr("text-anchor", "middle")
              .style("font-size", "16px")
              .style("text-decoration", "underline");

}

    //Creates the dropwdown menu
    var data = []
    d3.csv(file, function(d){
      //Save the data in an object
      data.push(d)
      //Creates a sorted list with all LA's. The file must be sorted
      var options = d3.select("#la")
      for (i=0;i<data[0].length;i++){
        options.append("option")
                .attr("value", data[0][i]["Code"])
                .text(data[0][i]["LA"])
      }
        })

  </script>
</body>
