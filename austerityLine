<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Austerity line Graph</title>
    <script src="https://d3js.org/d3.v4.min.js" charset="utf-8"></script>
</head>
<body>
  <div>
    <p> Ok. Schools had more money between 2002/2003 and 2009/2010 and then less during austerity. But did they loose all the gains? All values have been adjusted by the inflation </p>
  </div>
  <div id="menu">
    <input type="button" onclick="update()" value="Show" id="show_button">
  </div>
  <div id="lineGraph">
  </div>
  <div id="menu2">
    <form name="Local Authority">
      <select name="Local Authority" id="la">
      </select>
      <input type="button" value="Submit" id="submit_button">
    </form>
  </div>

  <style>
  .line {
  fill: none;
  stroke: steelblue;
  stroke-width: 2px;
}

  div.tooltip {
    position: absolute;
    text-align: center;
    padding: 2px;
    font: 12px sans-serif;
    background: white;
    border: 0px;
    border-radius: 8px;
    pointer-events: none;
}

#svg {
  position: relative;
}

  </style>

  <script>
  d3.select("#menu2").style("display","none")

  //Find the maximun value in the array
  function findMax(array) {
    let max = 0
    for (i=0;i<array.length;i++){
      if (Number(array[i]) > max){max = Number(array[i])}
    }
    return max
  }

    //Select the data
    let file = "vis_data/lineGraph.csv"
    d3.csv(file, function(d){
      window.data = d
  })

    function update() {

      d3.select('#svg')
        .remove()

      d3.select('#lineGraph')
        .selectAll("p")
        .remove()


      //Select the data that we want
      let england = 0
      let wales = 0
      let values = []
      for (i=0;i < data.length; i++) {
        values.push(data[i]["PP 2002-2003 Real"])
        values.push(data[i]["PP 2009-2010 Real"])
        values.push(data[i]["PP 2017-2018"])
        if (data[i]["LA"] == "England") {england += i}
        else if (data[i]["LA"] == "Wales") {wales += i}
        }


      //Define the are of SVG1 and its margin
      var width = 1000
      var height = 500

      var margin = {
            top: 30,
            left: 50,
            right: 300,
            bottom: 30
          };

      var svg = d3.select("#lineGraph")
              .append("svg")
              .attr('width', width)
              .attr('height', height)
              .attr('id', 'svg')
              .append("g")
              .attr("transform", "translate(" + margin.left + "," + margin.top + ")")

      //Adjust the areas to be used in the scale
      width = width - margin.left - margin.right
      height = height - margin.top - margin.bottom


      //Create the legend
      svg.append('rect')
            .attr("x", 700)
            .attr('display', 'block')
            .attr('fill', "#e53636")
            .attr('height', '20px')
            .attr('width', '20px')
            .attr("stroke", "black");

      svg.append('rect')
          .attr("x", 700)
          .attr("y", 25)
          .attr('display', 'block')
          .attr('fill', "#1ab385")
          .attr('height', '20px')
          .attr('width', '20px')
          .attr("stroke", "black");

      svg.append('text')
          .text("England")
          .attr("x",721)
          .attr("y", 15);

      svg.append('text')
          .text("Wales")
          .attr("x",721)
          .attr("y", 40);

      //Defines the scale
      let maxValue = findMax(values)

      var scaleX = d3.scaleOrdinal()
                     .range([0, width/2, width])
                     .domain(["2002/2003","2009/2010", "2017/2018"]);

      var scaleY = d3.scaleLinear()
                     .range([height, 0])
                     .domain([0, maxValue]);

      //Define the line generator
      var line = d3.line()
                   .x(function(d) { return scaleX(d.x); })
                   .y(function(d) { return scaleY(d.y); })

      //Creates the tooltip
      var div = d3.select("body")
                  .append("div")
                  .attr("class", "tooltip")
                  .style("opacity", 0);

      //Create and append the axis
      var xAxis = d3.axisBottom(scaleX)


      var yAxis = d3.axisLeft(scaleY)
                    .tickFormat(function(d){
                      return "Â£" + d
                    });

      svg.append("g")
         .attr("class","x axis")
         .attr("transform", "translate(0," + height + ")")
         .call(xAxis);

      svg.append("g")
         .attr("class", "y axis")
         .call(yAxis);

      //Line England and Wales
      dataEngland = [
        {x:"2002/2003", y:data[england]["PP 2002-2003 Real"]},
        {x:"2009/2010", y:data[england]["PP 2009-2010 Real"]},
        {x:"2017/2018", y:data[england]["PP 2017-2018"]},
      ]

      dataWales = [
        {x:"2002/2003", y:data[wales]["PP 2002-2003 Real"]},
        {x:"2009/2010", y:data[wales]["PP 2009-2010 Real"]},
        {x:"2017/2018", y:data[wales]["PP 2017-2018"]},
      ]

    //ENGLAND
    //Creates the line
    svg.append("path")
    .attr("fill", "none")
    .attr("stroke", "#e53636")
    .attr("stroke-linejoin", "round")
    .attr("stroke-linecap", "round")
    .attr("stroke-width", 1.5)
    .attr("d", line(dataEngland));

    //Creates circles for the data points

    svg.append("circle")
    .data(dataEngland)
    .attr('r', 3)
    .attr('fill', "black")
    .attr("cy", function(d){ return scaleY(d.y)})
    .attr("cx", scaleX("2002/2003"))
    .on("mouseover", function (d) {
      div.style("opacity", .7)

      div.html(d.y)
         .style("left", (d3.event.pageX) + "px")
         .style("top", (d3.event.pageY - 14) + "px");
    })
    .on("mouseout", function (d) {
      div.style("opacity", 0)

    })

    svg.append("circle")
    .data([dataEngland[1]])
    .attr('r', 3)
    .attr('fill', "black")
    .attr("cy", function(d){ return scaleY(d.y)})
    .attr("cx", scaleX("2009/2010"))
    .on("mouseover", function (d) {
      div.style("opacity", .7)

      div.html(d.y)
         .style("left", (d3.event.pageX) + "px")
         .style("top", (d3.event.pageY - 14) + "px");
    })
    .on("mouseout", function (d) {
      div.style("opacity", 0)
    })

    svg.append("circle")
    .data([dataEngland[2]])
    .attr('r', 3)
    .attr('fill', "black")
    .attr("cy", function(d){ return scaleY(d.y)})
    .attr("cx", scaleX("2017/2018"))
    .on("mouseover", function (d) {
      div.style("opacity", .7)

      div.html(d.y)
         .style("left", (d3.event.pageX) + "px")
         .style("top", (d3.event.pageY - 14) + "px");
    })
    .on("mouseout", function (d) {
      div.style("opacity", 0)
    })


       //WALES
       //Creates the line
       svg.append("path")
       .attr("fill", "none")
       .attr("stroke", "#1ab385")
       .attr("stroke-linejoin", "round")
       .attr("stroke-linecap", "round")
       .attr("stroke-width", 1.5)
       .attr("d", line(dataWales));

       //Creates circles for the data points
       svg.append("circle")
       .data(dataWales)
       .attr('r', 3)
       .attr('fill', "black")
       .attr("cy", function(d){ return scaleY(d.y)})
       .attr("cx", scaleX("2002/2003"))
       .on("mouseover", function (d) {
         div.style("opacity", .7)

         div.html(d.y)
            .style("left", (d3.event.pageX) + "px")
            .style("top", (d3.event.pageY - 14) + "px");
       })
       .on("mouseout", function (d) {
         div.style("opacity",0)
       })

       svg.append("circle")
       .data([dataWales[1]])
       .attr('r', 3)
       .attr('fill', "black")
       .attr("cy", function(d){ return scaleY(d.y)})
       .attr("cx", scaleX("2009/2010"))
       .on("mouseover", function (d) {
         div.style("opacity", .7)

         div.html(d.y)
            .style("left", (d3.event.pageX) + "px")
            .style("top", (d3.event.pageY - 14) + "px");
       })
       .on("mouseout", function (d) {
         div.style("opacity",0)
       })

       svg.append("circle")
       .data([dataWales[2]])
       .attr('r', 3)
       .attr('fill', "black")
       .attr("cy", function(d){ return scaleY(d.y)})
       .attr("cx", scaleX("2017/2018"))
       .on("mouseover", function (d) {
         div.style("opacity", .7)

         div.html(d.y)
            .style("left", (d3.event.pageX) + "px")
            .style("top", (d3.event.pageY - 14) + "px");
       })
       .on("mouseout", function (d) {
         div.style("opacity",0)
       })

       window.startY = 50

    //Menu to select a LA to show in the graph
    d3.select("#lineGraph")
            .append("p")
            .text("Do you want to check how your Local Authority did during the period? Just select it and click the button")

    //Creates a sorted list with all LA's. The file must be sorted
    d3.select("#menu2").style("display","block")
    var options = d3.select("#la")
    for (i=0;i<data.length-3;i++){
        options.append("option")
               .attr("value", i)
               .text(data[i]["LA"])
              }

    d3.select("#submit_button").on("click", function(){
      let selected = options._groups[0][0].value
      let la = data[selected]


      dataLA = [
        {x:"2002/2003", y:la["PP 2002-2003 Real"]},
        {x:"2009/2010", y:la["PP 2009-2010 Real"]},
        {x:"2017/2018", y:la["PP 2017-2018"]},
      ]

      svg.append("path")
      .attr("fill", "none")
      .attr("stroke", function(d) {
        color = "hsl(" + Math.random() * 360 + ",100%,50%)"
        return color;
      })
      .attr("stroke-linejoin", "round")
      .attr("stroke-linecap", "round")
      .attr("stroke-width", 1.5)
      .attr("d", line(dataLA));

        //Creates circles for the data points

        svg.append("circle")
            .data(dataLA)
            .attr('r', 3)
            .attr('fill', "black")
            .attr("cy", function(d){ return scaleY(d.y)})
            .attr("cx", scaleX("2002/2003"))
            .on("mouseover", function (d) {
              div.style("opacity", .7)

              div.html(d.y)
                 .style("left", (d3.event.pageX) + "px")
                 .style("top", (d3.event.pageY - 14) + "px");
            })
            .on("mouseout", function (d) {
              div.style("opacity",0)
            })

            svg.append("circle")
            .data([dataLA[1]])
            .attr('r', 3)
            .attr('fill', "black")
            .attr("cy", function(d){ return scaleY(d.y)})
            .attr("cx", scaleX("2009/2010"))
            .on("mouseover", function (d) {
              div.style("opacity", .7)

              div.html(d.y)
                 .style("left", (d3.event.pageX) + "px")
                 .style("top", (d3.event.pageY - 14) + "px");
            })
            .on("mouseout", function (d) {
              div.style("opacity",0)
            })

            svg.append("circle")
            .data([dataLA[2]])
            .attr('r', 3)
            .attr('fill', "black")
            .attr("cy", function(d){ return scaleY(d.y)})
            .attr("cx", scaleX("2017/2018"))
            .on("mouseover", function (d) {
              div.style("opacity", .7)

              div.html(d.y)
                 .style("left", (d3.event.pageX) + "px")
                 .style("top", (d3.event.pageY - 14) + "px");
            })
            .on("mouseout", function (d) {
              div.style("opacity",0)
            })


            //Add the legend
            svg.append('rect')
                .attr("x", 700)
                .attr("y", startY)
                .attr('display', 'block')
                .attr('fill', color)
                .attr('height', '20px')
                .attr('width', '20px')
                .attr("stroke", "black");

            svg.append('text')
                .text(data[selected]["LA"])
                .attr("x",721)
                .attr("y", startY + 15);

            startY = startY + 25

    })

    }


  </script>
</body>
